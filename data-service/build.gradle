plugins {
    id 'com.google.cloud.tools.jib' version '2.5.0'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.7.1"
    id 'nebula.release' version '11.0.0'
    id 'jacoco'
    id 'com.bmuschko.docker-spring-boot-application' version '6.4.0'
}

sonarqube {
    properties {
        property 'sonar.login', System.getenv('SONAR_DATA_SERVICE_TOKEN')
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'relay-service'
        property 'sonar.projectKey', 'relay-data-service'
        property 'sonar.coverage.jacoco.xmlReportsPath', 'build/reports/jacoco/test/jacocoTestReport.xml'
    }
}

jar {
    archivesBaseName = 'data-service'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
}


ext {
    swaggerVersion = '2.9.0'
    apacheCommonsVersion = '3.7'

    spring = [
            web          : "org.springframework.boot:spring-boot-starter-web",
            undertow     : "org.springframework.boot:spring-boot-starter-undertow",
            security     : "org.springframework.boot:spring-boot-starter-security",
            jpa          : "org.springframework.boot:spring-boot-starter-data-jpa",
            commons      : "org.springframework.data:spring-data-commons",
            actuator     : "org.springframework.boot:spring-boot-starter-actuator",
            devtools     : "org.springframework.boot:spring-boot-devtools",
//            test         : "org.springframework.boot:spring-boot-starter-test",
//            security_test: "org.springframework.security:spring-security-test",


    ]

    db = [
            h2        : "com.h2database:h2",
            postgresql: "org.postgresql:postgresql"
    ]

    doc = [
            swagger   : "io.springfox:springfox-swagger2:$swaggerVersion",
            swagger_ui: "io.springfox:springfox-swagger-ui:$swaggerVersion"
    ]

    util = [
            apache_commons: "org.apache.commons:commons-lang3:$apacheCommonsVersion"
    ]
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
}

dependencies {
    compile spring.web,
            spring.undertow,
            spring.jpa,
            spring.commons,

            doc.swagger,
            doc.swagger_ui,
            db.postgresql,
            util.apache_commons

    runtime spring.devtools

    implementation "org.mapstruct:mapstruct-jdk8:1.3.0.Final"
    implementation "org.springframework.cloud:spring-cloud-starter-zipkin"
    implementation  spring.actuator
    implementation 'io.micrometer:micrometer-registry-prometheus:1.3.6'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final" //Must be defined before the lombok annotationProcessor
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
//    compile('org.springframework.cloud:spring-cloud-starter-config')
//    compile(':spring-cloud-starter-eureka')
    compile group: 'org.testcontainers', name: 'postgresql', version: '1.10.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation db.h2
}

repositories {
    jcenter()
    mavenCentral()
}


jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
test {
    useJUnitPlatform()
}


docker {
    registryCredentials {
        url = "https://index.docker.io/v1/"
        username = System.getenv('DOCKER_LOGIN')
        password = System.getenv('DOCKER_PASS')
    }
    springBootApplication {
        baseImage = 'openjdk:14'
        ports = [9090, 8082]
        images = [System.getenv('DOCKER_IMAGE') + ':0.0.2', System.getenv('DOCKER_IMAGE') + ':latest']
    }
}
check.dependsOn jacocoTestReport


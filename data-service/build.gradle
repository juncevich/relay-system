plugins {
    id 'com.google.cloud.tools.jib' version '2.6.0'
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id "org.sonarqube" version "3.0"
    id 'nebula.release' version '11.0.0'
    id 'jacoco'
    id "org.flywaydb.flyway" version "6.2.3"
    id "net.ltgt.apt" version "0.21"
}

sonarqube {
    properties {
        property 'sonar.login', System.getenv('SONAR_DATA_SERVICE_TOKEN')
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'relay-service'
        property 'sonar.projectKey', 'relay-data-service'
        property 'sonar.jacoco.reportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
    }
}

group = 'com.relay'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '15'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2020.0.0-SNAPSHOT")
    set('testcontainersVersion', "1.15.0")
    set('swaggerVersion', "2.9.0")
    set('dekorateVersion', "1.0.1")
}

dependencies {
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "io.dekorate:kubernetes-spring-starter:${dekorateVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'

    implementation "org.mapstruct:mapstruct-jdk8:1.3.0.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation 'org.flywaydb:flyway-core'
    implementation('io.micrometer:micrometer-registry-prometheus:1.5.0')
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
test {
    useJUnitPlatform {
//        includeTags 'unit', 'integration', ''
    }
}

check.dependsOn jacocoTestReport

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jib {
    from {
        image = 'openjdk:15-alpine'
    }
    to {
        image = 'alexunc/data-service'
        auth{
            username = System.getenv('DOCKER_LOGIN')
            password = System.getenv('DOCKER_PASS')
        }
        tags = [version, 'latest']
    }
    container {
//        jvmFlags = ['-Dmy.property=example.value', '-Xms512m', '-Xdebug']
//        mainClass = 'mypackage.MyApp'
//        args = ['some', 'args']
        ports = ['9090', '8080']
//        labels = [key1:'value1', key2:'value2']
//        format = 'OCI'
    }
}
